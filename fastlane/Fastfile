# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

fastlane_require 'yaml'
fastlane_require 'net/http'
fastlane_require 'uri'
fastlane_require 'json'

default_platform(:ios)

# replace `example.xcworkspace` to your project's xcworkspace name
workspace_file = "example.xcworkspace"

# replace `example` to your project's scheme name
scheme_name = "example"

match_url = "https://github.com/AtlasXV/certificates.git"

project_name = "example"
project_git_url = "https://github.com/AtlasXV/example.git"
appstore_app_id = "请填写"


compile_silent = true


desc "构建开始"
before_all do |lane, options|
end

desc "构建成功"
after_all do |lane, options|
end

desc "构建失败"
error do |lane, exception, options|
    # 发生错误时复原lfs配置，与buildbump配合使用
    # fastlane有时会提示该指令有错误，不影响后续操作，忽视告警即可
    begin
        sh("git", "config", "--unset", "lfs.#{project_git_url}/info/lfs.locksverify")
    rescue => exception
        puts exception
    end
end


platform :ios do
    before_all do |lane, options|
	    setup_ci
    end

    desc "When first import project, setup initial settings, ex. signing"
    lane :setup_first do        
        # 导出用
        match(type: "adhoc", readonly: true,git_url: match_url)
        match(type: "appstore", readonly: true,git_url: match_url)
        puts "FirstImport Finished"
    end

    desc "Build AdHoc ipa and upload to OTA"
    desc "make sure to run following cmd to install needed plugins before run"
    desc "```\nfastlane install_plugins\n```"
    desc ""
    lane :adhoc do
        # using match to sync cert and profiles
        match(type: "adhoc",readonly: true,git_url: match_url)

        # Build
        gym(
            configuration: "Adhoc",     # 不同工程的adhoc的configuration命名可能不一样
            workspace: workspace_file,
            scheme: scheme_name,
            export_method: "ad-hoc",
            output_directory: './FastlaneOutput',
            # 以下两个参数是减少无用的一大坨打印, 非常必要, 尤其是在调试CI机器时
            silent: compile_silent,
            suppress_xcode_output: true
        )

        # Get changelog
        cf = YAML::load_file(File.join('../','changelog.yml'))
        changelog = cf.values[0]

        # Upload to OTA
        # 来源: https://docs.fastlane.tools/plugins/available-plugins/#upload_to_server
        upload_to_server(
            endPoint: 'https://apps.etm.tech/apps',
            multipartPayload: {
                :changelog => changelog,
            },
            ipa: lane_context[SharedValues::IPA_OUTPUT_PATH]
        )
        puts "App(AdHoc) Uploaded"

        notification(title: "Complete", message: "AdHoc publish is finished!")
    end


    desc "Build Appstore ipa and upload to OTA"
    desc "make sure to run following cmd to install needed plugins before run"
    desc "```\nfastlane install_plugins\n```"
    desc ""
    lane :store do
        # using match to sync cert and profiles
        match(type: "appstore",readonly: true,git_url: match_url)

        # Build
        gym(
            configuration: "Release",
            workspace: workspace_file,
            scheme: scheme_name,
            export_method: "app-store",
            output_directory: './FastlaneOutput',
            silent: compile_silent,
            suppress_xcode_output: true          
        )

        # Get changelog
        cf = YAML::load_file(File.join('../','changelog.yml'))
        changelog = cf.values[0]

        # Upload to OTA
        upload_to_server(
            endPoint: 'https://apps.etm.tech/apps',
            multipartPayload: {
                :changelog => changelog,
            },
            ipa: lane_context[SharedValues::IPA_OUTPUT_PATH]
        )
        puts "App(Appstore) Uploaded"
        notification(title: "Complete", message: "Appstore publish is finished!")
    end

    desc "Build Appstore ipa and upload to TestFlight"
    desc ""
    lane :beta do
        # using match to sync cert and profiles
        match(type: "appstore",readonly: true,git_url: match_url)

        # build
        gym(
            configuration: "Release",
            workspace: workspace_file,
            scheme: scheme_name,
            export_method: "app-store",
            output_directory: './FastlaneOutput',
            silent: compile_silent,
            suppress_xcode_output: true
        )

        # Get changelog
        cf = YAML::load_file(File.join('../','changelog.yml'))
        changelog = cf.values[0]

        app_path = lane_context[SharedValues::IPA_OUTPUT_PATH]
        dsym_path = lane_context[SharedValues::DSYM_OUTPUT_PATH]

        puts "APP:#{app_path}"
        puts "DSYM:#{dsym_path}"
        upload_to_testflight(
		ipa: app_path,
		skip_waiting_for_build_processing: true,
		apple_id: appstore_app_id
	)
        notify_ota(changelog,app_path)

        notification(title: "Complete", message: "Testflight Beta publish is finished!")   
    end

    # 更新版本号和Build号
    lane :buildbump do
        version = get_version_number(
            xcodeproj: "#{project_name}.xcodeproj",
            target: "#{project_name}"
        )
    
        cf = YAML::load_file(File.join('../','changelog.yml'))
        version = cf.keys[0]
        puts "version ( get from changelog.yml ) is #{version}"
    
        increment_version_number(
            version_number: version
        )
        
        build = increment_build_number
        commit_version_bump(
          xcodeproj:"#{project_name}.xcodeproj",
          message: "chore: update version #{version} (#{build})"
        )
        
        sh("git", "config", "lfs.#{project_git_url}/info/lfs.locksverify", "false")
        push_to_git_remote(
            tags: false
        )
        sh("git", "config", "--unset", "lfs.#{project_git_url}/info/lfs.locksverify")
    end

    desc "Upload recompiled dsyms in the dsyms directory to crashlytics"
    lane :upload_dsyms do
        directory_name = "dsyms"
        Dir.mkdir(directory_name) unless File.exists?(directory_name)

        # Download dSYM files from iTC 
        download_dsyms(
            platform: "ios",
            version: "latest",
            output_directory: "fastlane/" + directory_name
        )

        # Upload them to Crashlytics
        upload_symbols_to_crashlytics(
            gsp_path: "./GoogleService-Info.plist",
        )

        # Delete the local dSYM files
        clean_build_artifacts
    end
end


def notify_ota(changelog,app_path)
    ota_notify_url = "https://apps.etm.tech/app"
    app_version = get_ipa_info_plist_value(ipa: app_path, key: "CFBundleShortVersionString")
    app_build_version = get_ipa_info_plist_value(ipa: app_path, key: "CFBundleVersion")
    app_name    = get_ipa_info_plist_value(ipa: app_path, key: "CFBundleDisplayName")
    app_bundle   = get_ipa_info_plist_value(ipa: app_path, key: "CFBundleIdentifier")
    app_size = File.size( app_path )

    app_info =
    {
        changelog:changelog,
        buildType:"Appstore",
        bundleId:app_bundle,
        version:app_version,
        build:app_build_version,
        name:app_name,
        size:app_size,
        platform:"ios"
    }
    
    puts app_info

    uri = URI.parse(ota_notify_url)
    https = Net::HTTP.new(uri.host, uri.port)
    https.use_ssl = true

    request = Net::HTTP::Post.new(uri.request_uri)
    request.add_field('Content-Type', 'application/json')
    request.body = app_info.to_json

    response = https.request(request)
    puts "------------------------------"
    puts "Response #{response.code} #{response.message}: #{response.body}"
end
